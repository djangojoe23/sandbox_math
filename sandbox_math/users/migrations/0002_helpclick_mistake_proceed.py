# Generated by Django 4.1.9 on 2023-05-31 08:52

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("users", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="HelpClick",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "sandbox",
                    models.CharField(
                        choices=[
                            ("Prealgebra", "Pre-algebra"),
                            ("Algebra", "Algebra"),
                            ("Graphs", "Graphs"),
                            ("Shapes", "Shapes"),
                        ],
                        default=None,
                        max_length=10,
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "object_type",
                    models.CharField(
                        choices=[("expression", "User clicked on an expression to see if it had any mistakes")],
                        default=None,
                        max_length=10,
                    ),
                ),
                ("click_time", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Mistake",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "mistake_type",
                    models.CharField(
                        choices=[
                            ("Define the Equation", "Use the dropdown in the first step to define an equation."),
                            (
                                "Linear Equations Only",
                                "Please make sure the equation you defined in the first step is linear.",
                            ),
                            (
                                "Need a Variable",
                                "Please provide a variable to solve in the equation in the first step.",
                            ),
                            ("Select a Variable", "Use the dropdown menu to select which variable to solve for."),
                            (
                                "Select a Step Type",
                                "Use the dropdown above this step to select which step type you want here.",
                            ),
                            (
                                "Select a Variable in Equation",
                                "Use the dropdown menu to select a variable to solve for that is in your equation.",
                            ),
                            ("No Blank Expressions", "You need to type something in to each input box for each step."),
                            ("Incorrect Rewrite", "This expression is not equivalent to the previous step."),
                            ("Unequal Arithmetic", "The arithmetic is not the same on both sides of the equation."),
                            ("Do Arithmetic", "Do some arithmetic to this expression."),
                            (
                                "Copy Previous Step",
                                "Please copy the previous step's expression and then do arithmetic to it.",
                            ),
                            ("Use Parentheses", "Please use parentheses to do arithmetic to the entire expression."),
                            ("Non-Algebraic Expression", "This isn't an expression that makes sense in this context."),
                            (
                                "Missing Something",
                                "Please remove the grey box from the expression or enter something in it.",
                            ),
                            ("Change Step Type", "The equation was already defined in the first step."),
                            (
                                "Unknown Symbol",
                                "Please remove the symbol in this expression that has no meaning in this context.",
                            ),
                            (
                                "Check Previous Expression",
                                "Fix the expression in the previous step so it makes sense, then try to rewrite it.",
                            ),
                            ("No Mistake Here", "All good!"),
                            (
                                "Already checked - incorrect",
                                "Trying to check rewrite or answer already proven to be wrong.",
                            ),
                            ("Expression needs fixed", "Trying to check expression that isn't valid."),
                            (
                                "Choosing a value",
                                "Mistake made while choosing a value to substitute in for a variable.",
                            ),
                            ("Substitution expression 1", "Mistake made while substituting into the first expression"),
                            (
                                "Substitution expression 2",
                                "Mistake made while substituting into the second expression",
                            ),
                        ],
                        default=None,
                        max_length=30,
                    ),
                ),
                (
                    "mistake_event_type",
                    models.CharField(
                        choices=[
                            ("HelpClick", "User clicked on help that showed a mistake"),
                            ("Proceed", "User went to the next step when there was a mistake in a previous step"),
                            ("CheckRewrite", "User made a mistake during the check rewrite process"),
                            ("CheckSolution", "User made a mistake during the check solution process"),
                        ],
                        default=None,
                        max_length=14,
                    ),
                ),
                ("event_id", models.PositiveIntegerField()),
                ("mistake_time", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="Proceed",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "sandbox",
                    models.CharField(
                        choices=[
                            ("Prealgebra", "Pre-algebra"),
                            ("Algebra", "Algebra"),
                            ("Graphs", "Graphs"),
                            ("Shapes", "Shapes"),
                        ],
                        default=None,
                        max_length=10,
                    ),
                ),
                ("problem_id", models.PositiveIntegerField()),
                (
                    "proceed_type",
                    models.CharField(
                        choices=[
                            ("add step", "User attempted to add new step to the problem"),
                            ("check solution", "User attempted to check the solution to the problem"),
                        ],
                        default=None,
                        max_length=15,
                    ),
                ),
                ("proceed_time", models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]
